#!/usr/bin/env bash
#===============================================================================
##   __
##  /\ \
##  \_\ \     __   __  __   __  _
##  /'_` \  /'__`\/\ \/\ \ /\ \/'\
## /\ \L\ \/\  __/\ \ \_/ |\/>  </
## \ \___,_\ \____\\ \___/  /\_/\_\
##  \/__,_ /\/____/ \/__/   \//\/_/
##------------------------------------------------------------------------------
## name:dx-util
## autobuild: 00001
## author:jakkvega
## updated: 
##------------------------------------------------------------------------------

#curl -L https://git.io/fx-setup  | bash -s -- inst --yes --debug
#curl -L https://git.io/fx-install | bash <-- dis what we want
#sudo chown -R $(whoami) /usr/local/*


#-------------------------------------------------------------------------------
# Meta
#-------------------------------------------------------------------------------

	readonly script_pid=$$
	readonly script_author="jakkvega"
	readonly script_id="dx-setup"
	readonly script_prefix="DX"
	readonly script_rc_file=".dxrc"
	readonly script_log_file="$script_id.log"

#-------------------------------------------------------------------------------
# Term
#-------------------------------------------------------------------------------

	red=$(tput setaf 1)||:
	green=$(tput setaf 2)
	blue=$(tput setaf 12)
	orange=$(tput setaf 214)
	white=$(tput setaf 248)
	white2=$(tput setaf 15)
	x=$(tput sgr0)
	eol="$(tput el)"
	bld="$(tput bold)"
	line="##---------------$nl"
	tab=$'\t'
	nl=$'\n'
	delta="${orange}\xE2\x96\xB3"
	pass="${green}\xE2\x9C\x93"
	fail="${red}\xE2\x9C\x97"
	lambda="\xCE\xBB"


#-------------------------------------------------------------------------------
# Print Utils
#-------------------------------------------------------------------------------


	function __printf(){
		local text color prefix
		text=${1:-}; color=${2:-white2}; prefix=${!3:-};
		[ $opt_quiet -eq 1 ] && [ -n "$text" ] && printf "${prefix}${!color}%b${x}" "${text}" 1>&2 || :
	}

	function confirm(){
		local ret;ret=1
		__printf "${1}? > " "white2" #:-Are you sure ?
		[ $opt_yes -eq 0 ] && __printf "${bld}${green}auto yes${x}\n" && return 0;
		[[ -f ${BASH_SOURCE} ]] && src='/dev/stdin' || src='/dev/tty'

		while read -r -n 1 -s answer < $src; do
			[ $? -eq 1 ] && exit 1;
			if [[ $answer = [YyNn10tf+\-q] ]]; then
				 [[ $answer = [Yyt1+] ]] && __printf "${bld}${green}yes${x}" && ret=0 || :
				 [[ $answer = [Nnf0\-] ]] && __printf "${bld}${red}no${x}" && ret=1 || :
				 [[ $answer = [q] ]] && __printf "\n" && exit 1 || :
				 break
			fi
		done
		__printf "\n"
		return $ret
	}

	function __sleep(){
		[ $opt_yes -eq 1 ] && sleep 1 || :
	}

	function error(){ local text=${1:-}; __printf " $text\n" "fail"; }
	function warn(){ local text=${1:-}; __printf " $text$x\n" "delta";  }
	function info(){ local text=${1:-}; [ $opt_debug -eq 0 ] && __printf "$lambda $text\n" "blue"; }

	function die(){ __printf "\n$fail $1 "; exit 1; }


#-------------------------------------------------------------------------------
# Helper Utils
#-------------------------------------------------------------------------------

	function dx_vars(){
		if [ -n $DX_PREFIX ]; then
			FX_LIB="$DX_PREFIX/lib/bashfx"
			FX_BIN="$DX_PREFIX/bin/bashfx"
			FX_ETC="$DX_PREFIX/etc/bashfx"
			FX_CONF_FILE="$DX_ETC/bashfx.conf"
			THIS_LINE="source \"$FX_CONF_FILE\""
			REGEX_LINE="^[^#]*\b$THIS_LINE"
			return 1
		fi
		return 0
	}

#-------------------------------------------------------------------------------
# SED Utils
#-------------------------------------------------------------------------------
#====================================api:sed!==================================

	function file_marker(){
		local delim dst dend mode="$1" lbl="$2" as="$3"
		dst='#';dend='#';
		[ "$as" = "js" ] && { dst='\/\*'; dend='\*\/'; }|| :
		[ "$mode" = "str" ] && str='str' || str='end'
		echo "${dst}----${block_lbl}:${str}----${dend}"
	}

	function file_add_block(){
		local newval="$1" src="$2" block_lbl="$3" delim="$4" match_st match_end data res ret=1
		match_st=$(file_marker "str" "${block_lbl}" "${delim}" )
		match_end=$(file_marker "end" "${block_lbl}" "${delim}" )
		res=$(file_find_block "$src" "$block_lbl" "${delim}" )
		ret=$?
		if [ $ret -gt 0 ]; then #nomatch ret=1
			data="$(cat <<-EOF
				${match_st}
				${newval}
				${match_end}
			EOF
			)";
			echo "$data" >> $src
			ret=$?
		else
			ret=1
		fi
		return $ret
	}

	function file_del_block(){
		local src="$1" block_lbl="$2" delim="$3" match_st match_end data res ret dst dend
		match_st=$(file_marker "str" "${block_lbl}" "${delim}" )
		match_end=$(file_marker "end" "${block_lbl}" "${delim}" )
		#fix clobber
		sed -i.bak "/${match_st}/,/${match_end}/d" "$src";ret=$?
		#sed "/${match_st}/,/${match_end}/d" "$src" < "${src}.bak" > "$src" ;ret=$?
		res=$(file_find_block "$src" "$block_lbl" "${delim}" );ret=$?
		[ $ret -gt 0 ] && ret=0 || ret=1
		rm -f "${src}.bak"
		return $ret
	}

	function file_find_block(){
		local src="$1" block_lbl="$2" delim="$3" match_st match_end data res ret=1
		match_st=$(file_marker "str" "${block_lbl}" "${delim}")
		match_end=$(file_marker "end" "${block_lbl}" "${delim}")
		res=$(sed -n "/${match_st}/,/${match_end}/p" "$src")
		[ -z "$res" ] && ret=1 || ret=0;
		echo "$res"
		return $ret;
	}
#====================================!api:sed==================================

#-------------------------------------------------------------------------------
# DX API
#-------------------------------------------------------------------------------

	function api_options(){
		[ "$0" != "-bash" ] && DX_THIS_DIR="$( cd "$(dirname "$0")" || exit; pwd -P)" \
												|| DX_THIS_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd -P)"

		DX_ROOT_DIR="$( cd $FX_THIS_DIR && cd .. || exit; pwd -P)"

		DX_INSTALLED=1

		DX_OPT_USER="/usr/local"
		DX_OPT_HOME="$HOME/.local"

		opt_debug=1
		opt_quiet=1
		opt_yes=1
		opt_local=1
		opt_nuke=1
		opt_clean=1

		DX_PKG_URL="https://git.io/fx-pkg"
		DX_SETUP_URL="https://git.io/fx-setup"
		DX_UTIL_URL="https://git.io/fx-util"

		[ -f "$HOME/.profile" ] && FX_BASH_PROFILE="$HOME/.profile" || FX_BASH_PROFILE="$HOME/.bash_profile"

		[[ "${@}" =~ "--system" ]] && { opt_local=0; DX_PREFIX="/usr/local"; } || :
		[[ "${@}" =~ "--local"  ]] && { opt_local=1; DX_PREFIX="$HOME/.local"; } || :
		[[ "${@}" =~ "--quiet"  ]] && { opt_quiet=0; opt_yes=0; } || :
		[[ "${@}" =~ "--debug"  ]] || [ $DEBUG_MODE -eq 0 ] && opt_debug=0 || :
		[[ "${@}" =~ "--nuke"   ]] && opt_nuke=0  || :
		[[ "${@}" =~ "--clean"  ]] && opt_clean=0 || :
		[[ "${@}" =~ "--yes"    ]] && opt_yes=0   || :

		list=($(find "$DX_OPT_HOME" "$DX_OPT_USER" -type f -name "dx.conf"))
		len=${#list[@]};

		[ $len -gt 0 ] && source "${list[0]}" || info "Could not find local dx.conf"
		[ $DX_INSTALLED -eq 0 ] && fx_vars || :

		info "DX_PREFIX defined? ($FX_PREFIX)"
	}


	function api_uninstall(){
		#api_nuke 0
		info "Refresh terminal to clear remaining FX vars"
	}

	function api_install(){
		:
	}

#-------------------------------------------------------------------------------
# DX Main
#-------------------------------------------------------------------------------
	function dispatch(){
    local call ret;
    call=$1; shift
		case $call in
			inst*)   api_install;   ret=$?;;
			unins*)  api_uninstall; ret=$?;;
			dl)		 : ret=$?;;
			*)
				if [ ! -z "$call" ]; then
					die "Invalid command $call";
					ret 1;
				fi
			;;
		esac
		return $ret
	}


	function main(){
		local args=("${@}")
		dispatch "${args[@]}";ret=$?
		return $ret
	}

#-------------------------------------------------------------------------------
# FX Driver
#-------------------------------------------------------------------------------


	if [ "$0" = "-bash" ]; then
		:
	else
		orig_args=("${@}")
		api_options "${orig_args[@]}"
		args=( "${orig_args[@]/\-*}" ); #delete anything that looks like an option
		main "${args[@]}";ret=$?
	fi

